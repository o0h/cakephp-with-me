<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cakephp-with-me</title>
    <link>https://cake.nichiyoubi.land/</link>
    <description>Recent content on cakephp-with-me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 18 May 2019 19:11:11 +0900</lastBuildDate>
    
	<atom:link href="https://cake.nichiyoubi.land/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fileのアップロードに関する結合テストをどうするか？</title>
      <link>https://cake.nichiyoubi.land/posts/35-file-upload-test/</link>
      <pubDate>Sat, 18 May 2019 19:11:11 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/35-file-upload-test/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;Controller のテストにおいて、IntegrationTestTrait(IntegrationTestCase)の &lt;code&gt;get&lt;/code&gt; / &lt;code&gt;posts&lt;/code&gt; といったメソッドを利用する機会は多いと思います。&lt;br /&gt;
この「POST や PUT のリクエスト」において、ファイルアップロード処理についてはどのように扱うべきでしょうか？&lt;br /&gt;
&lt;code&gt;post()&lt;/code&gt;に渡すデータ = リクエストボディとなるデータとは別に、&lt;code&gt;configRequest()&lt;/code&gt;によるリクエストコンテキストへの &lt;code&gt;$_FILES&lt;/code&gt; へのアップロードファイルの注入が必要です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Weekly CakePHP4 in 201901.3</title>
      <link>https://cake.nichiyoubi.land/posts/weekly-cakephp4-201901-3/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/weekly-cakephp4-201901-3/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;2019年1月13日〜19日にCakePHP(4.x)にとりこまれたコミットをおさらいしていきます。
※3.x / masterからのマージコミットは除きます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CakePHP 3.7.2がリリースされたので更新内容を確認</title>
      <link>https://cake.nichiyoubi.land/posts/37-cakephp-3_7_2/</link>
      <pubDate>Sat, 05 Jan 2019 02:01:40 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/37-cakephp-3_7_2/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3.7.2がリリースされたので、その内容をチェックしてみます。&lt;br /&gt;
3.7.1から2週間半振りののアップデートです.&lt;/p&gt;

&lt;p&gt;23個のPR/issueがcloseされており、CSやTypeHint、docなどの軽微な修正に加えてbugfixが盛り込まれています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Resource Routing</title>
      <link>https://cake.nichiyoubi.land/posts/36-resource-routing/</link>
      <pubDate>Tue, 25 Dec 2018 00:00:06 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/36-resource-routing/</guid>
      <description>&lt;p&gt;※1人AdventのDay-24です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHPのRouterには、ある名前のリソースに対してRESTfulなアクセスを簡単に提供する機能 &lt;code&gt;resources()&lt;/code&gt; があります。&lt;br /&gt;
その内部実装がどのようになっているのか、処理を追ってみました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ObjectRegistryについて</title>
      <link>https://cake.nichiyoubi.land/posts/35-object-registry/</link>
      <pubDate>Sun, 23 Dec 2018 07:35:23 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/35-object-registry/</guid>
      <description>&lt;p&gt;※1人AdventのDay-23です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;ObjectRegistryというものがあります。&lt;br /&gt;
CakePHPで内部的にかなり頻繁に利用されているクラスであり、インスタンス管理の根幹を担っていると言っても過言ではありません。&lt;br /&gt;
どんな使われ方をされていて、どんな処理をしているのかを見てみました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fixturize: テストの実行速度を大幅に改善させるプラグイン</title>
      <link>https://cake.nichiyoubi.land/posts/34-fixturize/</link>
      <pubDate>Sat, 22 Dec 2018 16:16:36 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/34-fixturize/</guid>
      <description>&lt;p&gt;※1人AdventのDay-22です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;friendsofcake/fixturizeは、CakePHPにおける単体テストの実行速度を大幅に改善させるプラグインです。&lt;br /&gt;
MySQL互換RDBMSで利用が可能で、導入は簡単です。&lt;br /&gt;
実際の利用方法と&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ORM/Database/Datasourceの棲み分け</title>
      <link>https://cake.nichiyoubi.land/posts/10-orm-database/</link>
      <pubDate>Fri, 21 Dec 2018 19:40:10 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/10-orm-database/</guid>
      <description>&lt;p&gt;※1人AdventのDay-21です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3のデータベース周りの処理を追っていくと、「ORM」「Database」「Datasource」という、似た名前のレイヤーが存在することに気づきます。&lt;br /&gt;
普段は特に意識することのないこれらの違いは、どこにあるのでしょうか。&lt;br /&gt;
気になったので調べてみました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CakePHP 3.7.1がリリースされたので更新内容を確認</title>
      <link>https://cake.nichiyoubi.land/posts/33-cakephp-3_7_1/</link>
      <pubDate>Wed, 19 Dec 2018 23:25:17 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/33-cakephp-3_7_1/</guid>
      <description>&lt;p&gt;※1人AdventのDay-19です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3.7.1がリリースされたので、その内容をチェックしてみます。&lt;br /&gt;
今回は3.7.x系の初アップデートということもあり、コミュニティにおいて発見されたものを中心としたbugfixが多く見られました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Behaviorを使うか、Traitにするか</title>
      <link>https://cake.nichiyoubi.land/posts/32-behavior-vs-trait/</link>
      <pubDate>Sun, 16 Dec 2018 16:04:42 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/32-behavior-vs-trait/</guid>
      <description>&lt;p&gt;※1人AdventのDay-16です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3ではBehaviorを利用することで、Tableクラスにmixinすることができます。また、PHPにはTraitの仕組みがあり、これを利用することで継承を用いずにメソッドやプロパティの再利用を実現することができます。&lt;br /&gt;
現時点で考えている、個人的な「どう使い分けるか」というポイントをまとめてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Entityの`$_accessible`について、もう1度。</title>
      <link>https://cake.nichiyoubi.land/posts/31-look-into-accesible/</link>
      <pubDate>Fri, 14 Dec 2018 06:44:56 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/31-look-into-accesible/</guid>
      <description>&lt;p&gt;※1人AdventのDay-14です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3では、データの誤操作を防ぐためEntityの持つプロパティへの代入可否を設定する &lt;code&gt;$_accessible&lt;/code&gt; 機構が備わっています。&lt;br /&gt;
具体的な利用方法を確認していきたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>カスタムファインダーについておさらい</title>
      <link>https://cake.nichiyoubi.land/posts/30-custom-find/</link>
      <pubDate>Thu, 13 Dec 2018 19:09:01 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/30-custom-find/</guid>
      <description>&lt;p&gt;※1人AdventのDay-13です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3で導入された「カスタムファインダー」は、Queryの組み立てを抽象化・パッケージ化する手法です。&lt;br /&gt;
よく利用するconditonsの追加やfields、formatResultsなどの手順を一箇所にまとめ、更にメソッドチェーンによるQueryのビルドを可能にします。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CakePHP 3.7の個人的な見どころ</title>
      <link>https://cake.nichiyoubi.land/posts/28-cakephp-3_7/</link>
      <pubDate>Sun, 09 Dec 2018 22:34:12 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/28-cakephp-3_7/</guid>
      <description>※1人AdventのDay-9です
1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar
晴れて、CakePHPの3.7がリリースされました。
CakePHP 3.7.0 Released — Bakery
ここしばらく、「4へのスムーズな移行をするために」を意識し続けてきたCakePHPコミュニティです。その様子は、別の場所に自分なりの観点でまとめてみています。
 今からちょっとだけ先の未来、CakePHP4の話 〜Upcoming CakePHP Roadmap &amp;amp; Releases〜 - コネヒト開発者ブログ CakePHP3.6.0のbeta1が出たのでおさらいしてみる - コネヒト開発者ブログ  そして、本来であれば「出さずに済ませたかった」とも言える3.7であり、これが3系のファイナルバージョンとなるはずです。
リリースノートと移行ガイドから、その内容を読み取ってみます。
主観により取捨選択しているので、詳細は原文を参照してください。
 CakePHP 3.7.0 Released — Bakery 3.7 Migration Guide - 3.7  CakePHP3.xの最終バージョン  This release is the last planned feature release for 3.x. Going forward the core team will be focusing on supporting 3.7 and completing 4.0.0.
 とされています。</description>
    </item>
    
    <item>
      <title>dereuromark/cakephp-dtoに触ってみる</title>
      <link>https://cake.nichiyoubi.land/posts/27-cakephp-dto/</link>
      <pubDate>Sat, 08 Dec 2018 18:12:32 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/27-cakephp-dto/</guid>
      <description>※1人AdventのDay-8です
1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar
CakePHP開発者であるMark Sch.さんが、新しいプラグインを公開されていました。 [New]dereuromark/cakephp-dto CakePHP DTO Plugin https://t.co/vBFe8DJUPE
&amp;mdash; function(){exit;} (@call_user_func) 2018年12月8日 
名前の通り、CakePHPでDTOを扱うための実装のようです。
cf) Data Transfer Object - Wikipedia
おもしろそうなので、早速触ってみました。
ざっくりいうと何？  決められたプロパティを持つmutable/immutableなオブジェクトを扱いやすくするためのもの 決められたプロパティ = 型は、設定ファイルに記述していく それらの設定を、実クラス生成コマンドによって作成する 実際のクラスを生成するからIDE上での保管や静的解析との相性が良い  CakeDTOに触ってみる setup まずは、インストールです
composer require dereuromark/cakephp-dto:dev-master  Pluginを有効化します。1
bin/cake plugin load CakeDto -b  はじめてのDTO作成 ファイル初期生成用のコマンドが用意されています。
bin/cake dto init  これを実行すると、config/dto.xmlに以下のようなファイルが設置されます
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;dtos xmlns=&amp;quot;cakephp-dto&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;cakephp-dto https://github.com/dereuromark/cakephp-dto&amp;quot;&amp;gt; &amp;lt;/dtos&amp;gt;  ・・・と言っておいて何ですが、個人的にYAMLでいきたいのでYAMLに書き換えます。 こちらのExampleを参考にしましょう。 /examples/basic.dto.yml</description>
    </item>
    
    <item>
      <title>findOrCreate()時にvalidationを行う</title>
      <link>https://cake.nichiyoubi.land/posts/24-find-or-create-validation/</link>
      <pubDate>Sun, 02 Dec 2018 18:12:32 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/24-find-or-create-validation/</guid>
      <description>※1人AdventのDay-2です
1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar
先日、Modelを書いているときにfindOrCreate()の挙動でハマった部分があったので調べてみました。 バリデーションが期待通りに動かなかったので、その対応を書いています。
findOrCreateメソッドについて CakePHP3のTableClassに、 findOrCreate() というメソッドがあります。
code: https://github.com/cakephp/cakephp/blob/3.6.13/src/ORM/Table.php#L1686
これは、「第1引数で渡されたデータを検索する。DB上に存在しなければ、新規にEntityを作成・保存し、それを返却する」というものです。知っていると、多くの場面で使いたくなります。
$data = [&#39;name&#39; =&amp;gt; &#39;new太郎&#39;]; $entity = $this-&amp;gt;Table-&amp;gt;findOrCreate($data);  この結果として、(DB上にすでにレコードがあるか無いかにかかわらず) {name: new太郎} のEntityインスタンスが取得される、というわけです。なお、 すでに persistent 済みであるため、$entity-&amp;gt;isNew() はfalseとなります。
実装内容について詳しく もう少し、内部処理について詳しく見てみましょう。
// \Cake\ORM\Table public function findOrCreate($search, callable $callback = null, $options = []) { $options = new ArrayObject($options + [ &#39;atomic&#39; =&amp;gt; true, &#39;defaults&#39; =&amp;gt; true, ]); $entity = $this-&amp;gt;_executeTransaction(function () use ($search, $callback, $options) { return $this-&amp;gt;_processFindOrCreate($search, $callback, $options-&amp;gt;getArrayCopy()); }, $options[&#39;atomic&#39;]); if ($entity &amp;amp;&amp;amp; $this-&amp;gt;_transactionCommitted($options[&#39;atomic&#39;], true)) { $this-&amp;gt;dispatchEvent(&#39;Model.</description>
    </item>
    
    <item>
      <title>`Query` を愛用する。(もしくは `-&gt;all()` を避ける)</title>
      <link>https://cake.nichiyoubi.land/posts/1-use-query/</link>
      <pubDate>Tue, 27 Mar 2018 13:52:39 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/1-use-query/</guid>
      <description>Cake2では、Modelからの返却値がすべて配列でした。
そのため、私はCake3を利用し始めた当初、「データベースからの取得した内容」は「値の集合」に変換して処理するぞ！みたいな意識が働きがちでした。
例えばこんな様子です
$books = $this-&amp;gt;Books-&amp;gt;find()-&amp;gt;all(); $this-&amp;gt;set(compact(&#39;books&#39;));  もっと酷い時は、ResultSetの使い方に難儀してhydrationをいじって、そのまま配列にして処理を・・・という書き方をしたりもしました。
ref: Class Cake\ORM\Query | CakePHP 3.4
しかし、QueryはIteratorAggregateを備えているので、「それをそのままループさせる」ことでレコードを処理することが可能です
// in controller $books = $this-&amp;gt;Books-&amp;gt;find(); $this-&amp;gt;set(compact(&#39;books&#39;)); // in template &amp;lt;?php foreach ($books as $book): ?&amp;gt; &amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;?= h($book-&amp;gt;title) ?&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;?php endforeach; ?&amp;gt;}  個人的には「単純にレコードを取り出したいだけ」の時は(all()などを使って)ResultSet化しないでQueryオブジェクトのままやり取りすることが多いです。
 Queryのままにしておく = 結果を確定させないままの状態を維持しておくことで利用できる機能があるため  orderやwhereの追加、subqueryの利用など  後にロジックの改修があったときに変更をしやすい  1と同じ理由です  明示的にall()を使っている箇所について、必ず「ResultSetが欲しい」「DBにクエリを実行させたい」と言ったような意図をコード上で表現できるようになる 単純にコードが減る  1,2は昨日の話です。3,4は表現力の話です。
これらに鑑みて、「デメリットはあまり無さそうでちょっとメリットがあるな」というのが、現時点での私の所見です。</description>
    </item>
    
    <item>
      <title>コレクションを任意の順番で並び替える</title>
      <link>https://cake.nichiyoubi.land/posts/16-collection/</link>
      <pubDate>Sun, 25 Mar 2018 20:35:59 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/16-collection/</guid>
      <description>コレクションを任意の順番で並び替える PHPを使っていると、「任意に順番を並び替えたキーに沿って、連想配列を並び替えたい」ということが意外と面倒くさかったりする。
MySQLでいう ORDER BY FIELD(field, idx1, idx2, idx3) みたいなやつ。
Collectionクラスを用いると簡単にできそうだな〜と思ったのでメモ。
$order = [2, 1, 3]; $data = collection([ [&#39;id&#39; =&amp;gt; 1, &#39;name&#39; =&amp;gt; &#39;John&#39;], [&#39;id&#39; =&amp;gt; 2, &#39;name&#39; =&amp;gt; &#39;Alice&#39;], [&#39;id&#39; =&amp;gt; 3, &#39;name&#39; =&amp;gt; &#39;Yui&#39;], ]); $orderMap = array_flip($order); $data = $data-&amp;gt;sortBy( function ($datum) use ($orderMap) { return $orderMap[$datum-&amp;gt;id]; }, SORT_ASC ) -&amp;gt;compile(false);  何をしているかというと、
 array_flipでもとの並び順を覚えさせて 対応順にarrayに位置を教えてあげる  というだけのもの。
Collectionクラスは、以前にQiitaにも書いた。
とても便利で強力なUtilityなので、使いこなしたい。
[CakePHP3]現場で使えるCollectionクラスの15選 - Qiita</description>
    </item>
    
    <item>
      <title>このサイトについて</title>
      <link>https://cake.nichiyoubi.land/about/</link>
      <pubDate>Sun, 25 Mar 2018 17:16:22 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/about/</guid>
      <description>私とCakePHP CakePHPを触っていて感じた、「こういう使い方ができるな」というtipsや実験を残していきたいと思います。
当面はCakePHP3のことがメインになると思いますが、関連情報を含め4.xや2.xについても記録を残していきたいです。
背景 CakePHP3は、2.xの時代から業務で利用しています。
私が触り始めた時と比較すると「人気が落ち着いた」という言葉もよく耳にしますが、(時代背景的にフルスタックなものよりコンポーネント志向が高まっている状況もありますが、)個人的には期待される責務に対して非常によく練られて勢いもあるフレームワークだと感じます。
しかしながら、まだまだWeb上に公開されている「実践的なやり方」が不足していて、この重厚かつ網羅的なソフトウェアのポテンシャルをまだまだ引き出されていないのでは？と思わされる場面が多々ありました。
自分にとってはCakeをやっていることが面白いので、その魅力が少しでも世間に届いたら幸いです。
このサイトはHugoで作られています。
テーマはpicklesを利用させていただいています。</description>
    </item>
    
  </channel>
</rss>