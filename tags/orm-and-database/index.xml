<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Orm and Database on cakephp-with-me</title>
    <link>https://cake.nichiyoubi.land/tags/orm-and-database/</link>
    <description>Recent content in Orm and Database on cakephp-with-me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 21 Dec 2018 19:40:10 +0900</lastBuildDate>
    
	<atom:link href="https://cake.nichiyoubi.land/tags/orm-and-database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ORM/Database/Datasourceの棲み分け</title>
      <link>https://cake.nichiyoubi.land/posts/10-orm-database/</link>
      <pubDate>Fri, 21 Dec 2018 19:40:10 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/10-orm-database/</guid>
      <description>&lt;p&gt;※1人AdventのDay-21です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3のデータベース周りの処理を追っていくと、「ORM」「Database」「Datasource」という、似た名前のレイヤーが存在することに気づきます。&lt;br /&gt;
普段は特に意識することのないこれらの違いは、どこにあるのでしょうか。&lt;br /&gt;
気になったので調べてみました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Behaviorを使うか、Traitにするか</title>
      <link>https://cake.nichiyoubi.land/posts/32-behavior-vs-trait/</link>
      <pubDate>Sun, 16 Dec 2018 16:04:42 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/32-behavior-vs-trait/</guid>
      <description>&lt;p&gt;※1人AdventのDay-16です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3ではBehaviorを利用することで、Tableクラスにmixinすることができます。また、PHPにはTraitの仕組みがあり、これを利用することで継承を用いずにメソッドやプロパティの再利用を実現することができます。&lt;br /&gt;
現時点で考えている、個人的な「どう使い分けるか」というポイントをまとめてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Entityの`$_accessible`について、もう1度。</title>
      <link>https://cake.nichiyoubi.land/posts/31-look-into-accesible/</link>
      <pubDate>Fri, 14 Dec 2018 06:44:56 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/31-look-into-accesible/</guid>
      <description>&lt;p&gt;※1人AdventのDay-14です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3では、データの誤操作を防ぐためEntityの持つプロパティへの代入可否を設定する &lt;code&gt;$_accessible&lt;/code&gt; 機構が備わっています。&lt;br /&gt;
具体的な利用方法を確認していきたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>カスタムファインダーについておさらい</title>
      <link>https://cake.nichiyoubi.land/posts/30-custom-find/</link>
      <pubDate>Thu, 13 Dec 2018 19:09:01 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/30-custom-find/</guid>
      <description>&lt;p&gt;※1人AdventのDay-13です&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3627&#34;&gt;1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;CakePHP3で導入された「カスタムファインダー」は、Queryの組み立てを抽象化・パッケージ化する手法です。&lt;br /&gt;
よく利用するconditonsの追加やfields、formatResultsなどの手順を一箇所にまとめ、更にメソッドチェーンによるQueryのビルドを可能にします。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>findOrCreate()時にvalidationを行う</title>
      <link>https://cake.nichiyoubi.land/posts/24-find-or-create-validation/</link>
      <pubDate>Sun, 02 Dec 2018 18:12:32 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/24-find-or-create-validation/</guid>
      <description>※1人AdventのDay-2です
1人advent(CakePHP中心、PHP開発よもやま) Advent Calendar 2018 - Adventar
先日、Modelを書いているときにfindOrCreate()の挙動でハマった部分があったので調べてみました。 バリデーションが期待通りに動かなかったので、その対応を書いています。
findOrCreateメソッドについて CakePHP3のTableClassに、 findOrCreate() というメソッドがあります。
code: https://github.com/cakephp/cakephp/blob/3.6.13/src/ORM/Table.php#L1686
これは、「第1引数で渡されたデータを検索する。DB上に存在しなければ、新規にEntityを作成・保存し、それを返却する」というものです。知っていると、多くの場面で使いたくなります。
$data = [&#39;name&#39; =&amp;gt; &#39;new太郎&#39;]; $entity = $this-&amp;gt;Table-&amp;gt;findOrCreate($data);  この結果として、(DB上にすでにレコードがあるか無いかにかかわらず) {name: new太郎} のEntityインスタンスが取得される、というわけです。なお、 すでに persistent 済みであるため、$entity-&amp;gt;isNew() はfalseとなります。
実装内容について詳しく もう少し、内部処理について詳しく見てみましょう。
// \Cake\ORM\Table public function findOrCreate($search, callable $callback = null, $options = []) { $options = new ArrayObject($options + [ &#39;atomic&#39; =&amp;gt; true, &#39;defaults&#39; =&amp;gt; true, ]); $entity = $this-&amp;gt;_executeTransaction(function () use ($search, $callback, $options) { return $this-&amp;gt;_processFindOrCreate($search, $callback, $options-&amp;gt;getArrayCopy()); }, $options[&#39;atomic&#39;]); if ($entity &amp;amp;&amp;amp; $this-&amp;gt;_transactionCommitted($options[&#39;atomic&#39;], true)) { $this-&amp;gt;dispatchEvent(&#39;Model.</description>
    </item>
    
    <item>
      <title>`Query` を愛用する。(もしくは `-&gt;all()` を避ける)</title>
      <link>https://cake.nichiyoubi.land/posts/1-use-query/</link>
      <pubDate>Tue, 27 Mar 2018 13:52:39 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/1-use-query/</guid>
      <description>Cake2では、Modelからの返却値がすべて配列でした。
そのため、私はCake3を利用し始めた当初、「データベースからの取得した内容」は「値の集合」に変換して処理するぞ！みたいな意識が働きがちでした。
例えばこんな様子です
$books = $this-&amp;gt;Books-&amp;gt;find()-&amp;gt;all(); $this-&amp;gt;set(compact(&#39;books&#39;));  もっと酷い時は、ResultSetの使い方に難儀してhydrationをいじって、そのまま配列にして処理を・・・という書き方をしたりもしました。
ref: Class Cake\ORM\Query | CakePHP 3.4
しかし、QueryはIteratorAggregateを備えているので、「それをそのままループさせる」ことでレコードを処理することが可能です
// in controller $books = $this-&amp;gt;Books-&amp;gt;find(); $this-&amp;gt;set(compact(&#39;books&#39;)); // in template &amp;lt;?php foreach ($books as $book): ?&amp;gt; &amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;?= h($book-&amp;gt;title) ?&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;?php endforeach; ?&amp;gt;}  個人的には「単純にレコードを取り出したいだけ」の時は(all()などを使って)ResultSet化しないでQueryオブジェクトのままやり取りすることが多いです。
 Queryのままにしておく = 結果を確定させないままの状態を維持しておくことで利用できる機能があるため  orderやwhereの追加、subqueryの利用など  後にロジックの改修があったときに変更をしやすい  1と同じ理由です  明示的にall()を使っている箇所について、必ず「ResultSetが欲しい」「DBにクエリを実行させたい」と言ったような意図をコード上で表現できるようになる 単純にコードが減る  1,2は昨日の話です。3,4は表現力の話です。
これらに鑑みて、「デメリットはあまり無さそうでちょっとメリットがあるな」というのが、現時点での私の所見です。</description>
    </item>
    
  </channel>
</rss>