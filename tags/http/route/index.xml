<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http/Route on cakephp-with-me</title>
    <link>https://cake.nichiyoubi.land/tags/http/route/</link>
    <description>Recent content in Http/Route on cakephp-with-me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 25 Dec 2018 00:00:06 +0900</lastBuildDate>
    
	<atom:link href="https://cake.nichiyoubi.land/tags/http/route/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Resource Routing</title>
      <link>https://cake.nichiyoubi.land/posts/36-resource-routing/</link>
      <pubDate>Tue, 25 Dec 2018 00:00:06 +0900</pubDate>
      
      <guid>https://cake.nichiyoubi.land/posts/36-resource-routing/</guid>
      <description>概要 CakePHPのRouterには、ある名前のリソースに対してRESTfulなアクセスを簡単に提供する機能 resources() があります。
その内部実装がどのようになっているのか、処理を追ってみました。
イントロ CakePHPは伝統的に設定より規約を重んじるフレームワークであり、Routingにもその色が濃く出ています。
CakePHP2の時代と違い、交換・取り外し可能にはなりましたが、fallbackを用いて「コントローラー/アクション」を自動的にマッピングし、起動する機構は健在です。
そうして、CakePHPにおいてはRoutingとは「書かなくても動くもの」としての性質がありますが、その方向性を更に強化するのがResource Routingだと感じます。
Resource Routingは、対象の「リソース」の名前を指定することで、RESTfulなエンドポイントを仕立てる機能です。
Bookにある例を引用し、概要の紹介とします。
ルーティング - 3.7
// config/routes.php 内で... Router::scope(&#39;/&#39;, function ($routes) { // 3.5.0 より前は `extensions()` を使用 $routes-&amp;gt;setExtensions([&#39;json&#39;]); $routes-&amp;gt;resources(&#39;Recipes&#39;); });     HTTP format URL.format 対応するコントローラーアクション     GET /recipes.format RecipesController::index()   GET /recipes/123.format RecipesController::view(123)   POST /recipes.format RecipesController::add()   PUT /recipes/123.format RecipesController::edit(123)   PATCH /recipes/123.format RecipesController::edit(123)   DELETE /recipes/123.</description>
    </item>
    
  </channel>
</rss>